---
# nginx, certbot, let's encrypt
- name: Install nginx
  ansible.builtin.apt:
    name:
      - nginx
      - certbot
      - python3-certbot-dns-cloudflare
      - rsync
    state: present
  when: ansible_facts['os_family'] == 'Debian'
- name: Install nginx
  ansible.builtin.dnf:
    name:
      - nginx
      - certbot
      - python3-certbot-dns-cloudflare
      - rsync
    state: present
  when: ansible_facts['os_family'] == 'RedHat'
- name: Ensure ~root/.secrets is present
  ansible.builtin.file:
    path: /home/root/.secrets
    state: directory
    mode: '0600'
- name: Ensure cloudflare.ini is present
  ansible.builtin.template:
    src: cloudflare.ini.j2
    dest: /home/root/.secrets/cloudflare.ini
    mode: '0400'
    owner: root
    group: root
- name: Copy nginx config files
  ansible.posix.synchronize:
    src: "{{ nginx_config_files_directory }}/sites-available/"
    dest: /etc/nginx/sites-available
  notify: Restart nginx
- name: Get 'certbot certificates' output
  ansible.builtin.shell:
    cmd: certbot certificates
    executable: /bin/bash
  register: certbot_certificates
  changed_when: false
- name: Acquire Let's Encrypt certificates with Certbot
  ansible.builtin.shell:
    cmd: "certbot certonly -n --agree-tos --email {{ vault_email_certbot }} --no-eff-email --dns-cloudflare --dns-cloudflare-credentials /home/root/.secrets/cloudflare.ini {% for domain in domains %} -d {{ domain }} {% endfor %} --preferred-challenges dns-01"
    executable: /bin/bash
  when:
    - not dry_run
  notify: Restart nginx
- name: Acquire Let's Encrypt certificates with Certbot - DRY RUN
  ansible.builtin.shell:
    cmd: "certbot certonly --staging -n --agree-tos --email {{ vault_email_certbot }} --no-eff-email --dns-cloudflare --dns-cloudflare-credentials /home/root/.secrets/cloudflare.ini {% for domain in domains %} -d {{ domain }} {% endfor %} --preferred-challenges dns-01"
    executable: /bin/bash
  when:
    #    - "'No certificates found' in certbot_certificates.stdout or 'INVALID: TEST_CERT' in certbot_certificates.stdout"
    - dry_run
  notify: Restart nginx
- name: Ensure certbot.timer is enabled
  ansible.builtin.systemd_service:
    unit: certbot.timer
    state: started
    enabled: true
  ignore_errors: true
- name: Ensure sites-enabled directory exists
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/"
    state: directory
- name: Create symlinks in /etc/nginx/sites-enabled/
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ item }}"
    dest: "/etc/nginx/sites-enabled/{{ item }}"
    state: link
  loop: "{{ sites_to_enable }}"
  notify: Restart nginx
- name: Ensure nginx is enabled
  ansible.builtin.systemd_service:
    name: nginx
    state: started
    enabled: true
