stages: [renovate, baremetal-config, validate, build, deploy, configure, cleanup]

include:
  - component: $CI_SERVER_FQDN/components/opentofu/job-templates@0.48.0
    inputs:
      version: 0.48.0

.ansible:
  image: alpine:3.21.3
  before_script:
    - apk add --no-cache ansible bash openssh-client ansible-lint

.ansible-playbook:
  extends: .ansible
  stage: configure
  variables:
    ANSIBLE_HOST_KEY_CHECKING: False
    ANSIBLE_CONFIG: ansible.cfg
  script:
    - mkdir -p ~/.ssh
    - echo $ANSIBLE_PRIVATE_KEY | base64 -d >> ~/.ssh/id_ed25519 && chmod '600' ~/.ssh/id_ed25519
    - cd ansible
    - ansible-playbook -i $INVENTORY --extra-vars '{"environment_name":"'$ENVIRONMENT_NAME'"}' $PLAYBOOK

renovate:
  stage: renovate
  image: ghcr.io/renovatebot/renovate@sha256:4c65d57529345b53f52e8a3f913de398052fe44b754865e7d79e6e62eb5859d3
  script:
    - renovate
  rules:
    - if: '$CI_PIPELINE_SOURCE == "schedule"'
  variables:
    RENOVATE_PLATFORM: 'gitlab'
    RENOVATE_ENDPOINT: $CI_API_V4_URL
    RENOVATE_TOKEN: $GL_TOKEN
    RENOVATE_AUTODISCOVER: 'true'
    GITHUB_COM_TOKEN: $GH_RO_TOKEN
    LOG_LEVEL: debug

#tofu fmt baremetal:
#  stage: baremetal-config
#  extends: [.opentofu:fmt]
#  variables:
#    GITLAB_TOFU_ROOT_DIR: terraform/cloudflare-bare-metal
#
#tofu validate baremetal:
#  stage: baremetal-config
#  extends: [.opentofu:validate]
#  needs: ['tofu fmt baremetal']
#  variables:
#    GITLAB_TOFU_ROOT_DIR: terraform/cloudflare-bare-metal
#
#tofu plan baremetal:
#  stage: baremetal-config
#  extends: [.opentofu:plan]
#  needs: ['tofu validate baremetal']
#  variables:
#    GITLAB_TOFU_ROOT_DIR: terraform/cloudflare-bare-metal
#
#tofu apply baremetal:
#  stage: baremetal-config
#  extends: [.opentofu:apply]
#  needs: ['tofu plan baremetal']
#  variables:
#    GITLAB_TOFU_ROOT_DIR: terraform/cloudflare-bare-metal

ansible bare metal:
  stage: baremetal-config
  #needs: ['tofu apply baremetal']
  extends: .ansible-playbook
  variables:
    INVENTORY: inventory_bare_metal.config
    ENVIRONMENT_NAME: baremetal
  parallel:
    matrix:
      - PLAYBOOK: ['proxmox.yml']
  rules:
    - if: $CI_COMMIT_TAG

#ansible gitlab:
#  stage: baremetal-config
#  needs: ['ansible bare metal']
#  extends: .ansible
#  variables:
#    INVENTORY: inventory_gitlab.config
#    ENVIRONMENT_NAME: gitlab
#  parallel:
#    matrix:
#      - PLAYBOOK: ['gitlab.yml', 'gitlab-runner.yml']
#  rules:
#    - if: $CI_COMMIT_TAG

# ansible lint:
#   stage: validate
#   extends: .ansible
#   script:
#     - cd ansible
#     - ansible-lint

tofu fmt:
  extends: [.opentofu:fmt]
  variables:
    GITLAB_TOFU_ROOT_DIR: terraform/vm/

tofu validate:
  extends: [.opentofu:validate]
  variables:
    GITLAB_TOFU_ROOT_DIR: terraform/vm/

tofu plan dev:
  extends: [.opentofu:plan]
  variables:
    GITLAB_TOFU_STATE_NAME: dev
    GITLAB_TOFU_VAR_FILE: dev.tfvars
    GITLAB_TOFU_ROOT_DIR: terraform/vm/
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: on_success

tofu plan prod:
  extends: [.opentofu:plan]
  variables:
    GITLAB_TOFU_STATE_NAME: prod
    GITLAB_TOFU_VAR_FILE: prod.tfvars
    GITLAB_TOFU_ROOT_DIR: terraform/vm/
  rules:
    - if: $CI_COMMIT_TAG

tofu apply dev:
  extends: [.opentofu:apply]
  variables:
    GITLAB_TOFU_STATE_NAME: dev
    GITLAB_TOFU_VAR_FILE: dev.tfvars
    GITLAB_TOFU_ROOT_DIR: terraform/vm/
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: on_success

tofu apply prod:
  extends: [.opentofu:apply]
  variables:
    GITLAB_TOFU_STATE_NAME: prod
    GITLAB_TOFU_VAR_FILE: prod.tfvars
    GITLAB_TOFU_ROOT_DIR: terraform/vm/
  rules:
    - if: $CI_COMMIT_TAG

ansible VM dev:
  extends: .ansible-playbook
  variables:
    INVENTORY: inventory_VMs.config
    ENVIRONMENT_NAME: dev
  parallel:
    matrix:
      - PLAYBOOK: ['speak-to-me.yml', 'breathe.yml']
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: on_success

ansible VM prod:
  extends: .ansible-playbook
  variables:
    INVENTORY: inventory_VMs.config
    ENVIRONMENT_NAME: prod
  parallel:
    matrix:
      - PLAYBOOK: ['speak-to-me.yml', 'breathe.yml']
  rules:
    - if: $CI_COMMIT_TAG

tofu destroy dev:
  extends: [.opentofu:destroy]
  variables:
    GITLAB_TOFU_STATE_NAME: dev
    GITLAB_TOFU_VAR_FILE: dev.tfvars
    GITLAB_TOFU_ROOT_DIR: terraform/vm/
  rules:
    - if: $CI_COMMIT_TAG
      when: never
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
      when: never
    - when: manual
